/*!
 * @ProjectName micro-app
 * @Version 1.0.0
 * @Author lixinliang
 * @Update Tue Aug 02 2016 16:48:16 GMT+0800 (CST)
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["microApp"] = factory();
	else
		root["microApp"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";

	// // Use to detect the browser
	// let userAgent = navigator.userAgent;
	// const iOS = /\(i[^;]+;( U;)? CPU.+Mac OS X/;
	// const Safari = /\bversion\/([0-9.]+(?: beta)?)(?: mobile(?:\/[a-z0-9]+)?)? safari\//i;
	// const iPad = /ipad/i;
	//
	// // Namespace
	// const doc = document;
	// let microApp = doc.querySelector('script[micro-app]');
	// if (!microApp) {
	//     // Create micro-app element
	//     let { createElement } = require('./modules/create-element');
	//     microApp = createElement('<script micro-app>');
	//     doc.head.appendChild(microApp);
	// }
	//
	// // A fallback of micro-app
	// ['filters'].forEach(( methodName ) => {
	//     if (!microApp[methodName]) {
	//         microApp[methodName] = function () {
	//             console.warn(`micro-app: "${ methodName }" is an empty function if this browser is not Safari or website is opened in standalone mode.`);
	//             return this
	//         };
	//     }
	// });
	//
	// // Detect the browser
	// if (iOS.test(userAgent)) {
	//     if (Safari.test(userAgent)) {
	//         // It looks like in Safari
	//         // Core of micro-app
	//         require('./modules/core')(microApp);
	//     } else if (navigator.standalone) {
	//         // That means website running in web-app
	//         if (location.hash.length > 1) {
	//             let result = {};
	//             location.hash.substring(1).split('&').forEach(( keyValue ) => {
	//                 let [ key = '', value = '' ] = keyValue.split('=');
	//                 result[key] = value;
	//             });
	//             let uri = result['redirect-uri'];
	//             // Make a fake splash if `default-splash` is exist
	//             let { createSplash } = require('./modules/create-splash');
	//             createSplash({
	//                 image : result['default-splash'],
	//                 css : require('./style_modules/default-splash.scss'),
	//             });
	//             createSplash({
	//                 image : result['landscape-splash'],
	//                 css : require('./style_modules/landscape-splash.scss'),
	//             });
	//             if (uri) {
	//                 // This website just is a router, then I will redirect to the target page
	//                 microApp.redirect = () => {
	//                     // The router page will not be saved in session history by `location.replace`
	//                     location.replace(decodeURIComponent(uri));
	//                 };
	//                 // Before redirect, dispatchEvent on `window`
	//                 let redirectEvent = doc.createEvent('CustomEvent');
	//                 redirectEvent.initEvent('redirect', false, true);
	//                 // Delay depend `duration`
	//                 if (result.duration === void 0) {
	//                     // Redirect right now when `duration` is not exist
	//                     if (window.dispatchEvent(redirectEvent)) {
	//                         microApp.redirect();
	//                     }
	//                     // Stop redirecting by `event.preventDefault()`
	//                 } else {
	//                     setTimeout(() => {
	//                         if (window.dispatchEvent(redirectEvent)) {
	//                             microApp.redirect();
	//                         }
	//                     }, result.duration);
	//                 }
	//             } else {
	//                 if (result.duration !== void 0) {
	//                     let element = document.documentElement;
	//                     let attribute = 'micro-splash';
	//                     let splashEvent = doc.createEvent('CustomEvent');
	//                     splashEvent.initEvent('splashhide', false, true);
	//                     setTimeout(() => {
	//                         window.dispatchEvent(splashEvent);
	//                         element.setAttribute(attribute, '');
	//                         setTimeout(() => {
	//                             element.removeAttribute(attribute);
	//                         }, 600);
	//                     }, result.duration);
	//                 }
	//                 // If `duration` is not exist, splash should be closed manually
	//             }
	//         }
	//     }
	// }
	//
	// module.exports = microApp;

	// add to home screen 的缓存(app-store)

	// 体验优化
	// 1. 用户安装时触发的事件
	// 2. 增加删除描述文案
	// 3. 提供原生交互
	// 3.1 应用的3Dtouch快捷方式
	// 3.2 消息推送
	// 3.3 应用进入后台事件(Home键)
	// 3.4 应用返回前台事件
	// 4. 无法解决icon等信息的动态修改与缓存

	// 不能用解构 避免打包不必要的代码
	// 新增loader 模块化 使用文件夹

	// window.matchMedia

	module.exports = 1;

/***/ }
/******/ ])
});
;